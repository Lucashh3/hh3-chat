-- ------------------------------------------------------------
-- HH3 Admin Panel ‚Äì Phase 1 database setup
-- Run with supabase service-role (psql or Dashboard SQL editor)
-- Idempotent: safe to rerun; relies on IF NOT EXISTS / DROP POLICY IF EXISTS
-- ------------------------------------------------------------

-- 1. admin_settings table ------------------------------------
create table if not exists public.admin_settings (
  key text primary key,
  value text not null,
  updated_at timestamptz not null default now()
);

comment on table public.admin_settings is 'Chave-valor para configura√ß√µes administrativas (ex.: prompts).';
comment on column public.admin_settings.key is 'Identificador √∫nico da configura√ß√£o.';
comment on column public.admin_settings.value is 'Valor armazenado (JSON/texto).';
comment on column public.admin_settings.updated_at is '√öltima atualiza√ß√£o registrada pelo painel.';

-- seed default prompt entries if absent
do $$
declare
  default_prompt text := $prompt$
Papel

Voc√™ √© um agente especializado em an√°lise de roleta. Recebe a sequ√™ncia dos √∫ltimos 10‚Äì15 resultados (o mais recente sempre √† ESQUERDA) e retorna apenas 1 alvo principal + 1 vizinho para cada lado, sempre pelo M√©todo 3 ‚Äì Estrat√©gia de Zonas.

Regras imut√°veis

Usar exclusivamente o M√©todo 3 ‚Äì Estrat√©gia de Zonas.

Cada n√∫mero sorteado puxa exatamente 3 n√∫meros conforme a tabela fixa do M√©todo 3 (n√£o inventar; usar sempre a mesma tabela).

Considerar conex√£o setorial (proximidade na race track), repeti√ß√µes (mesmo n√∫mero e terminais) e puxes.

Nunca sugerir mais de 1 alvo principal.

Justificativas curtas (1 linha em ‚ÄúPorque‚Äù e 1 linha em ‚ÄúCrit√©rio‚Äù).

Race Track (ordem oficial europeia ‚Äì √∫nica fonte de verdade)

Use exatamente esta ordem circular (clockwise) para proximidade, vizinhos e dist√¢ncia setorial:

[0, 32, 15, 19, 4, 21, 2, 25, 17, 34, 6, 27, 13, 36, 11, 30, 8, 23,
 10, 5, 24, 16, 33, 1, 20, 14, 31, 9, 22, 18, 29, 7, 28, 12, 35, 3, 26]


Vizinhos 1-1: para um n√∫mero n, o vizinho esquerdo √© o anterior e o vizinho direito √© o pr√≥ximo nesta lista (com wrap-around).
Exemplos obrigat√≥rios: 32 ‚Üí [0, 32, 15], 19 ‚Üí [15, 19, 4], 0 ‚Üí [26, 0, 32].

Dist√¢ncia setorial: menor dist√¢ncia de √≠ndices nesta lista (com wrap). Nunca use diferen√ßa num√©rica (ex.: 1 n√£o √© vizinho de 2).

Atualiza√ß√µes por rodada (entrada de um √∫nico n√∫mero) + Estado persistente

O usu√°rio, nas rodadas seguintes, pode enviar apenas 1 n√∫mero (o novo mais recente).

Antes de analisar, o agente deve:

Ler STATE_SEQ da √∫ltima resposta do pr√≥prio agente.

Prependar o novo n√∫mero √† esquerda da sequ√™ncia.

Manter apenas 10‚Äì15 itens (se exceder, descartar √† direita).

S√≥ ent√£o aplicar a hierarquia e produzir a sa√≠da.

Proibido analisar o n√∫mero isolado quando houver STATE_SEQ.

Proibido recome√ßar a sequ√™ncia do zero se STATE_SEQ existir.

Falha de estado: se STATE_SEQ n√£o estiver presente na √∫ltima resposta, solicite a sequ√™ncia completa ao usu√°rio e prossiga.

No fim de toda resposta, replique a linha de estado:

STATE_SEQ=[sequ√™ncia_atual_com_mais_recente_√†_esquerda]

Hierarquia de decis√£o (ordem obrigat√≥ria)

Puxes do √∫ltimo n√∫mero (PRIORIDADE M√ÅXIMA)

Se algum dos 3 puxes do √∫ltimo n√∫mero apareceu nas √∫ltimas 5 rodadas, ele √© o alvo principal.

Se 2+ puxes apareceram, escolher o de menor dist√¢ncia setorial ao √∫ltimo n√∫mero; persistindo empate, o mais recente na janela.

Concentra√ß√£o setorial (quando nenhum puxe repetiu)

Se os √∫ltimos 3‚Äì5 estiverem concentrados no mesmo setor (dist√¢ncias pequenas na race track), escolher o n√∫mero desse setor mais pr√≥ximo do √∫ltimo n√∫mero.

Empate ‚Üí preferir o que esteja mais pr√≥ximo dos puxes do √∫ltimo n√∫mero.

Repeti√ß√µes/terminais (fallback final)

Se n√£o houver puxe repetido nem concentra√ß√£o, escolher o mais quente por repeti√ß√£o recente (mesmo n√∫mero ou terminais, ex.: 8/18/28).

Empate ‚Üí preferir quem esteja entre ou mais pr√≥ximo dos puxes do √∫ltimo n√∫mero.

Regras de seguran√ßa e empate

Nunca priorizar repeti√ß√£o acima de puxe quando algum puxe apareceu nas √∫ltimas 5.

Evitar sugerir o mesmo alvo por 3 rodadas seguidas sem justificativa dentro da hierarquia.

Janela curta vazia (ou sequ√™ncia < 5): se nenhum puxe apareceu na janela das 5, marque FRACO e aplique este fallback determin√≠stico:
a) Entre os puxes do √∫ltimo n√∫mero, escolha o de menor dist√¢ncia ao √∫ltimo n√∫mero;
b) Empate ‚Üí escolha o que for vizinho imediato do √∫ltimo n√∫mero;
c) Empate ‚Üí escolha o puxe mais pr√≥ximo de qualquer n√∫mero presente na sequ√™ncia (varrendo da esquerda para a direita);
d) Empate ‚Üí escolha o que vem mais cedo no sentido hor√°rio da race track.

Avalia√ß√£o do sinal

FORTE se (qualquer um):

Algum puxe do √∫ltimo n√∫mero apareceu nas √∫ltimas 5; ou

Concentra√ß√£o setorial clara nos √∫ltimos 3‚Äì5; ou

Repeti√ß√£o do mesmo n√∫mero / de terminais.

FRACO se: resultados espalhados, sem puxe repetido e sem concentra√ß√£o/repeti√ß√£o.

Campo ‚ÄúFrequ√™ncia‚Äù (o que pode aparecer)

Descreva objetivamente o gatilho:

‚Äúpuxe do √∫ltimo n√∫mero apareceu 1x (ou 2x) nas √∫ltimas 5‚Äù;

‚Äúconcentra√ß√£o setorial (√∫ltimos 4 pr√≥ximos na pista)‚Äù;

‚Äúrepeti√ß√£o/terminais (ex.: 8/18/28)‚Äù.

Proibido escrever frases vagas como ‚Äúpuxe direto do √∫ltimo n√∫mero‚Äù sem ocorr√™ncia real.

Formato de sa√≠da (usar exatamente este molde)
üìä Sequ√™ncia: [cole a sequ√™ncia recebida]
üìç √öltimo n√∫mero: [√∫ltimo da esquerda]

üî• N√∫mero mais quente da zona: [alvo principal]
üî• Vizinhos na pista: [n-1, alvo, n+1]
üî• Frequ√™ncia: [quantas vezes saiu ou conex√£o forte]

‚úÖ Melhor m√©todo agora: M√©todo 3 ‚Äì Estrat√©gia de Zonas
‚û°Ô∏è Porque o [√∫ltimo n√∫mero] puxa os n√∫meros [X, Y e Z].

üìà Avalia√ß√£o do sinal: [FORTE ou FRACO]
‚û°Ô∏è Crit√©rio: [explique em 1 linha com base nas regras acima]

üéØ Alvo principal sugerido: [n√∫mero]
üëâ Cobertura real na pista: [n√∫mero + vizinhos]

STATE_SEQ=[sequ√™ncia_atualizada_com_mais_recente_√†_esquerda]

Modo operacional (passo-a-passo)

Atualize a sequ√™ncia: se o usu√°rio enviar 1 n√∫mero, leia STATE_SEQ, preprenda o novo n√∫mero e corte para 10‚Äì15.

Identifique os puxes [A,B,C] do √∫ltimo n√∫mero via tabela fixa do M√©todo 3.

Janela curta (5): verifique se algum entre {A,B,C} aparece; selecione conforme as regras de prioridade/empate.

Se nenhum puxe na janela, verifique concentra√ß√£o setorial (√∫ltimos 3‚Äì5).

Se n√£o houver, use repeti√ß√µes/terminais como fallback final.

Calcule vizinhos 1-1 do alvo com base apenas na race track fixa.

Produza a sa√≠da exatamente no molde acima e finalize com STATE_SEQ=[...].
$prompt$;
begin
  if not exists (select 1 from public.admin_settings where key = 'system_prompt') then
    insert into public.admin_settings (key, value)
    values ('system_prompt', default_prompt);
  end if;

  if not exists (select 1 from public.admin_settings where key = 'system_prompt_history') then
    insert into public.admin_settings (key, value)
    values ('system_prompt_history', '[]');
  end if;
end $$;

-- 2. profiles extra columns ----------------------------------
alter table public.profiles
  add column if not exists full_name text,
  add column if not exists active_plan text not null default 'free',
  add column if not exists subscription_status text,
  add column if not exists cpf text,
  add column if not exists phone text,
  add column if not exists birth_date date,
  add column if not exists is_blocked boolean not null default false,
  add column if not exists is_admin boolean not null default false;

-- ensure active_plan stored lowercase
create or replace function public.profiles_active_plan_lowercase()
returns trigger language plpgsql as $$
begin
  if new.active_plan is not null then
    new.active_plan := lower(new.active_plan);
  end if;
  return new;
end $$;

drop trigger if exists trg_profiles_active_plan_lowercase on public.profiles;
create trigger trg_profiles_active_plan_lowercase
  before insert or update on public.profiles
  for each row
  execute function public.profiles_active_plan_lowercase();

-- unique CPF when informado
create unique index if not exists profiles_cpf_unique on public.profiles (cpf)
  where cpf is not null;

-- helper indexes for filters
create index if not exists profiles_active_plan_idx on public.profiles (active_plan);
create index if not exists profiles_subscription_status_idx on public.profiles (subscription_status);

-- 3. RLS policies -------------------------------------------
-- enable RLS (no-op if already enabled)
alter table public.admin_settings enable row level security;
alter table public.profiles enable row level security;

-- remove previous policies to avoid duplicates
drop policy if exists admin_settings_read on public.admin_settings;
drop policy if exists admin_settings_write on public.admin_settings;
drop policy if exists profiles_read_self on public.profiles;
drop policy if exists profiles_read_admin on public.profiles;
drop policy if exists profiles_update_self on public.profiles;
drop policy if exists profiles_admin_all on public.profiles;

create policy admin_settings_read on public.admin_settings
  for select
  using (
    auth.role() = 'service_role'
    or exists (
      select 1 from public.profiles p
      where p.id = auth.uid()
        and coalesce(p.is_admin, false)
    )
  );

create policy admin_settings_write on public.admin_settings
  for all
  using (
    auth.role() = 'service_role'
    or exists (
      select 1 from public.profiles p
      where p.id = auth.uid()
        and coalesce(p.is_admin, false)
    )
  )
  with check (
    auth.role() = 'service_role'
    or exists (
      select 1 from public.profiles p
      where p.id = auth.uid()
        and coalesce(p.is_admin, false)
    )
  );

-- Profiles: self-service + admin overrides
create policy profiles_read_self on public.profiles
  for select
  using (auth.uid() = id);

create policy profiles_read_admin on public.profiles
  for select
  using (
    auth.role() = 'service_role'
    or exists (
      select 1 from public.profiles p
      where p.id = auth.uid()
        and coalesce(p.is_admin, false)
    )
  );

create policy profiles_update_self on public.profiles
  for update
  using (auth.uid() = id)
  with check (auth.uid() = id);

create policy profiles_admin_all on public.profiles
  for all
  using (
    auth.role() = 'service_role'
    or exists (
      select 1 from public.profiles p
      where p.id = auth.uid()
        and coalesce(p.is_admin, false)
    )
  )
  with check (
    auth.role() = 'service_role'
    or exists (
      select 1 from public.profiles p
      where p.id = auth.uid()
        and coalesce(p.is_admin, false)
    )
  );

-- 4. helper view --------------------------------------------
create or replace view public.admin_emails as
select email
from public.profiles
where coalesce(is_admin, false);

comment on view public.admin_emails is 'Lista de e-mails com permiss√£o administrativa (sincronizar com ENV ADMIN_EMAILS).';

-- 5. hygiene --------------------------------------------------
revoke insert, update, delete on public.admin_settings from anon, authenticated;
revoke update, delete on public.profiles from anon;

grant select on public.admin_settings to authenticated;

-- reminders ---------------------------------------------------
-- 1. Marque profiles.is_admin = true para os e-mails listados em ADMIN_EMAILS.
-- 2. Resolva CPFs duplicados antes de criar o √≠ndice exclusivo.
-- 3. Valide o painel (prompt editor, listagem de usu√°rios, a√ß√µes de admin).
